def changeCount = 0
def hasChanges = false

pipeline {
    agent any

    environment {
        ENV = "dev" // "dev" || "prod"

        GIT_REPO_URL = 'https://github.com/HaeahnDev/Project-Vanilla.git'
        GIT_PROJECT_NAME = 'vanilla_springboot' // Docker Build 소문자 사용 ( ERROR: invalid tag "<이미지>:<태그>": repository name must be lowercase
        GIT_BRANCH = 'main'
        CREDENTIALS_ID = 'github_token'

        // WORKSPACE 분리를 위한 경로 설정
        WORKSPACE_PATH = "C:\\ProgramData\\Jenkins\\.jenkins\\workspace\\${JOB_NAME}_${GIT_PROJECT_NAME}"
        // WORKSPACE 와 GIT REPO 공간 분리
        LOCAL_PATH = "D:\\CodeH\\Jenkins"
        PROJECT_PATH = "${LOCAL_PATH}\\publish\\${GIT_PROJECT_NAME}"

        // Docker Image = <Image Name>:<Image Tag>
        DOCKER_IMAGE_NAME = "${GIT_PROJECT_NAME}"
        DOCKER_IMAGE_TAG = "latest"
        // DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_CONTAINER_NAME = "${GIT_PROJECT_NAME}"

        HOST_PORT = "12000"
        // springboot 기본 포트 = 8080
        CONTAINER_PORT = "8080"

        // COPY + MOUNT : 마운트 경로 때문에 분리 필요
        HOST_RESOURCES_PATH = "${LOCAL_PATH}\\config\\java_springboot"
        HOST_LOGS_PATH = "${LOCAL_PATH}\\logs"

        // JAVA 옵션
        GRADLE_OPTS = "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true"
        JAVA_OPTS = "-Xms1g -Xmx2g"
    }

    options {
        skipDefaultCheckout(true) // 기본 checkout 방지, manually checkout scmGit 실행
        timestamps() // 로그에 시간 추가
        timeout(time: 30, unit: 'MINUTES') // 빌드 제한시한 설정 // 10분 초과하는 듯..
        disableConcurrentBuilds() // 동시 빌드 방지(동시성 이슈 방지)
        buildDiscarder(logRotator(daysToKeepStr: '30', numToKeepStr: '10'))
        skipStagesAfterUnstable() // unstable stage 이후 skip - 테스트 실패 이후 추가 작업 중단
    }

    stages {
        stage('Initialize') {
            steps {
                echo "[Stage] === Pipeline Initialization ==="
                echo "PROJECT: ${GIT_PROJECT_NAME}"
                echo "Build Number: ${BUILD_NUMBER}"
                echo "Build URL: ${BUILD_URL}"
                echo "Workspace: ${WORKSPACE}"
                echo "Custom Workspace Path: ${WORKSPACE_PATH}"

                script {
                    // 시스템 체크 (윈도우용)
                    bat '''
                        echo === System Check ===
                        docker --version
                        if errorlevel 1 echo Docker not found
                        java -version
                        if errorlevel 1 echo Java not found
                        dir
                        echo Available disk space:
                        wmic logicaldisk get size,freespace,caption
                    '''
                }
            }
        }



        // 동시성 제어
        stage('Setup Workspace') {
            steps {
                script {
                    echo "[Stage] === Setting up custom workspace ==="

                    // 커스텀 워크스페이스 디렉토리 생성
                    // if not exist "${WORKSPACE_PATH}" mkdir "${WORKSPACE_PATH}"
                    bat """
                        if not exist "${WORKSPACE_PATH}" (
                            mkdir "${WORKSPACE_PATH}"
                            echo Workspace directory created: ${WORKSPACE_PATH}
                        )
                    """

                    // 현재 작업 디렉토리를 커스텀 워크스페이스로 변경
                    dir("${WORKSPACE_PATH}") {
                        // echo "Current working directory: ${pwd()}"
                        bat """
                        cd
                        dir
                        """
                    }
                }
            }
        }

        stage('Checkout Source Code') {
            steps {
                script {
                    echo "[Stage] === Checking out source code ==="
                    // 커스텀 워크스페이스에서 소스코드 체크아웃
                    dir("${PROJECT_PATH}") {
                        bat "if not exist \"${PROJECT_PATH}\" mkdir \"${PROJECT_PATH}\""

                        //git branch: "${env.GIT_BRANCH}", credentialsId: "${env.CREDENTIALS_ID}", url: "${env.GIT_REPO_URL}"
                        checkout scmGit(
                            branches: [[name: "*/${env.GIT_BRANCH}"]],
                            extensions: [],
                            userRemoteConfigs: [[
                                credentialsId: "${env.CREDENTIALS_ID}",
                                url: "${env.GIT_REPO_URL}"
                            ]]
                        )
                        // 변경된 커밋 수 확인
                        def changeLogSets = currentBuild.changeSets
                        changeCount = changeLogSets.size()

                        for (changeSet in currentBuild.changeSets) {
                            if (!changeSet.isEmptySet()) {
                                hasChanges = true
                                break
                            }
                        }
                    }
                }
            }
        }

        // 빌드 시 필요 파일 준비 - resource/*.yml, libs/*.jar, ...
        // cf) resource/*.yml : docker run -v 마운트로 덮어쓰기
        stage('Prepare Configurations') {
            //when {
            //    expression { changeCount > 0 }
            //}
            steps {
                echo "[Stage] === Prepare Configurations(Optional) ==="
                script {
                    dir("${PROJECT_PATH}") {
                        // 경로 생성
                        bat """
                            if not exist "src\\main\\resources" (
                                mkdir "src\\main\\resources"
                            )
                        """
                        // 파일 복사 - resources, libs
                        bat """
                            if exist "${HOST_RESOURCES_PATH}" (
                                dir "${HOST_RESOURCES_PATH}\\default\\*" >nul 2>&1
                                if %errorlevel%==0 (
                                    xcopy /Y /Q "${HOST_RESOURCES_PATH}\\default\\resources\\*.yml" src\\main\\resources\\ >nul
                                    echo Successfully copied resource files from ${HOST_RESOURCES_PATH}
                                ) else (
                                    echo [INFO] No files found in ${HOST_RESOURCES_PATH}
                                )
                            ) else (
                                echo [INFO] Resource directory ${HOST_RESOURCES_PATH} does not exist
                            )
                        """
                    }
                }
            }
        }





















        stage('Docker Build') {
            //when {
            //    expression { changeCount > 0 }
            //}
            steps {
                echo "[Stage] === Docker Build ==="

                script {
                    echo "[Stage] === Docker Build ==="
                    dir("${PROJECT_PATH}") {
                        // bat "docker build --no-cache -f Dockerfile -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                        dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}")

                        // 빌드된 이미지 정보 출력
                        bat """
                            docker images ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
                            docker history ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} --no-trunc
                        """
                    }
                }
            }
        }

        //stage('Docker Image Test') {
        //    when {
        //        allOf {
        //            environment name: "ENV", value: "dev"
        //            expression { changeCount > 0 }
        //        }
        //    }
        //    steps {
        //        script {
        //            echo "[Stage] === Testing Docker image ==="
        //            bat """
        //                docker run --rm ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} java -version
        //                docker run --rm ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} echo "Container test successful"
        //            """
        //        }
        //    }
        //}

        stage('Deploy Application') {
            //when {
            //    expression { changeCount > 0 }
            //}
            steps {
                echo "[Stage] === Remove Old Container ==="

                    // 기존 컨테이너 정리
                    // 모든 오류 무시 - 컨테이가 존재하지 않는 경우 등
                    catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                        bat '''
                            docker stop %DOCKER_CONTAINER_NAME% 2>nul || echo Container was not running
                            docker rm %DOCKER_CONTAINER_NAME% 2>nul || echo Container was not found
                        '''
                    }









                    // 리소스 디렉토리 존재 확인 및 생성
                    bat """
                        if not exist "${HOST_RESOURCES_PATH}" (
                            mkdir "${HOST_RESOURCES_PATH}"
                        )
                    """
                    // 컨테이너 실행
                    // --network host : 윈도우에서 지원하지 않음
                    bat """
                        docker run -d --name ${DOCKER_CONTAINER_NAME} \
                            --restart unless-stopped \
                            -p ${HOST_PORT}:${CONTAINER_PORT} \
                            -v ${HOST_RESOURCES_PATH}\\default\\resources:/config \
                            -v ${HOST_LOGS_PATH}:/logs \
                            --network hubnx-local \
                            --env JAVA_OPTS="${JAVA_OPTS}" \
                            ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} \
                            --spring.config.location=classpath:/,file:/config/
                    """
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
            script {
                // 실패 시 컨테이너 로그 수집
                bat """
                    docker logs ${DOCKER_CONTAINER_NAME} || echo "No container logs available"
                """
            }
        }
        always {
            echo 'always'

            script {
                // if (isUnix()) {}
                // Docker 정리
                bat """
                    docker image prune -f
                    docker buildx prune -f
                """
                // 워크스페이스 정리
                cleanWs()

                // 빌드 정보 출력
                echo "Build completed with result: ${currentBuild.result}"
                echo "Build duration: ${currentBuild.durationString}"
            }
        }
    }
}